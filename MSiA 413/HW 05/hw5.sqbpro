<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/nuke2/Desktop/NW Work/MSiA 413/HW 05/hw5.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="175"/><column_width id="3" width="4090"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,9:mainCustomers"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="Customers" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="160"/><column index="2" value="139"/><column index="3" value="140"/><column index="4" value="300"/><column index="5" value="224"/><column index="6" value="83"/><column index="7" value="169"/><column index="8" value="151"/><column index="9" value="232"/><column index="10" value="220"/><column index="11" value="300"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">/*
Create media_types table
*/

drop table if exists media_types;

create table media_types (
	mediaTypeId integer not null primary key autoincrement,
	mediaName nvarchar(20) not null);
	
insert into media_types (mediaName)
select distinct mediaType from hw5_original;

/*
Create genres table
*/

drop table if exists genres;

create table genres (
	genreId integer not null primary key autoincrement,
	genreName nvarchar(32) not null);
	
insert into genres (genreName)
select distinct Genre from hw5_original;

/*
Create artists table
*/

drop table if exists artists;

create table artists (
	artistId integer not null primary key autoincrement,
	artistName nvarchar(64) not null);
	
insert into artists (artistName)
select distinct artistName from hw5_original;

/*
Create albums table
*/

drop table if exists albums;

create table albums (
	albumId integer not null primary key autoincrement,
	albumTitle nvarchar(64) not null,
	artistId integer not null);
			 --references artists(artistId));
	
insert into albums (albumTitle, artistId)
select distinct albumTitle, a.artistId
from hw5_original h
join artists a on h.artistName = a.artistName;

/*
Create tracks table
*/

drop table if exists tracks;

create table tracks (
	trackId integer not null primary key autoincrement,
	trackName nvarchar(128) not null,
	composer nvarchar(64),
	trackSizeBytes integer,
	trackLength integer,
	trackprice decimal(5, 3) not null,
	genreId integer not null
			references genres(genreId),
	mediaTypeId integer not null
				references media_types(mediaTypeId),
	albumId integer not null
				references albums(albumId),
	UNIQUE(trackName, trackLength) on conflict abort);

insert into tracks (trackName, composer, trackSizeBytes, 
					trackLength, trackprice, genreId,
					mediaTypeId, albumId)
	select 
	DISTINCT h.TrackName, 
	h.Composer,
	h.TrackSizeBytes,
	h.trackLength,
	h.trackprice,
	g.genreId,
	m.mediaTypeId,
	a.albumId
	from hw5_original h
	join genres g on h.Genre = g.genreName
	join media_types m on h.MediaType = m.mediaName
	join albums a on h.albumTitle = a.albumTitle
	where trackName is not null 
	and trackLength is not null
	and trackprice is not null;

/*
Create customers table
*/

drop table if exists Customers;

create table Customers (
	customerID integer not null primary key autoincrement,
	firstName nvarchar(64) not null,
	lastName nvarchar(64) unique not null,
	address nvarchar(256),
	city nvarchar(64),
	state nvarchar(64),
	country nvarchar(64),
	postalCode nvarchar(64),
	phoneNumber nvarchar(64),
	faxNumber nvarchar(64),
	email nvarchar(128) not null);	
	
insert into Customers (lastName, firstName, address,
					   city, state, country, postalCode,
					   phoneNumber, faxNumber,
					   email)
	select 
	distinct CustomerLastName, 
	CustomerFirstName,
	CustomerAddress,
	CustomerCity,
	CustomerState,
	CustomerCountry,
	CustomerPostalCode,
	CustomerPhone,
	CustomerFax,
	CustomerEmail
	from hw5_original
	where CustomerLastName not null
	and CustomerFirstName not null
	and CustomerEmail not null;

/*
Create Invoices table
*/

drop table if exists Invoices;

create table Invoices (
	InvoiceId integer unique not null primary key,
	Date datetime not null,
	billingAddress varchar(128),
	billingCity varchar(32),
	billingState varchar(32),
	billingCountry varchar(32),
	billingPostalCode varchar(32),
	customerId integer not null
			   references Customers(customerId));	
	
insert into Invoices (InvoiceId, Date, billingAddress, billingCity,
					   billingState, billingCountry, 
					   billingPostalCode, customerId)
	select 
	DISTINCT h.InvoiceId,
	h.InvoiceDate,
	h.InvoiceBillingAddress,
	h.InvoiceBillingCity,
	h.InvoiceBillingState,
	h.InvoiceBillingCountry,
	h.InvoiceBillingPostalCode,
	c.customerId
	from hw5_original h
	join Customers c on h.InvoiceBillingAddress = c.address
	where InvoiceId not null;
	
/*
Create Invoice_items table
*/

drop table if exists Invoice_items;

create table Invoice_items (
	InvoiceID integer not null
			  references Invoices(InvoiceId),
	InvoiceItemID integer not null primary key autoincrement,
	trackId integer not null
			references tracks(trackId),
	quantity integer not null,
	unitPrice numeric(10, 2) not null);	
	
insert into Invoice_items (InvoiceID, trackId, 
						   quantity, unitPrice)
	select
	DISTINCT InvoiceId,
	trackId,
	InvoiceItemQuantity,
	InvoiceItemUnitPrice
	from hw5_original h
	join tracks t on h.trackName = t.trackName and h.trackLength = t.trackLength
	where h.InvoiceItemUnitPrice not null
	and h.InvoiceItemQuantity not null;
	
/*
Question 7
*/

select 
ar.artistName,
round(sum(it.unitPrice * it.quantity), 2) total_income

from artists ar
join albums al on ar.artistId = al.artistId
join tracks t on t.albumId = al.albumId
join Invoice_items it on t.trackId = it.trackId
group by ar.artistName
order by total_income desc
limit 1</sql><current_tab id="0"/></tab_sql></sqlb_project>
