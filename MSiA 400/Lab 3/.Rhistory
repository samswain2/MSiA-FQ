# data downloaded from here - January and July 2019
#https://www.transtats.bts.gov/DL_SelectFields.asp?gnoyr_VQ=FGJ&QO_fu146_anzr=b0-gvzr
# set your working directory
setwd("~/Desktop/R-work/2022-NU-EDA/Data")
library(tidyverse)
library(ggplot2)
#read in dataset January2019 (provided)
January2019 <- read.csv("On_Time_Reporting_Carrier_On_Time_Performance_2019_1.csv",
header = TRUE, sep = ",")
#read in dataset July2019 (provided)
July2019 <- read.csv("On_Time_Reporting_Carrier_On_Time_Performance_2019_7.csv",
header = TRUE, sep = ",")
#see column names
names(January2019)
#### Data Selection ####
# columns to keep - total 29
keep_names <- c("Year", "Month", "DayofMonth", "DayOfWeek", "DepTime", "CRSDepTime",
"ArrTime", "CRSArrTime", "Reporting_Airline","Flight_Number_Reporting_Airline",
"Tail_Number", "ActualElapsedTime", "CRSElapsedTime", "AirTime", "ArrDelay", "DepDelay", "Origin", "Dest",
"Distance", "TaxiIn", "TaxiOut", "Cancelled",
"CancellationCode", "Diverted", "CarrierDelay", "WeatherDelay", "NASDelay", "SecurityDelay",
"LateAircraftDelay")
# select columns, and randomly sample 100K observations
# from each dataframe
temp <- select(January2019, all_of(keep_names))
names(temp)
# rename some of the variables
temp <- temp %>% rename(UniqueCarrier = Reporting_Airline,
FlightNum = Flight_Number_Reporting_Airline,
TailNum = Tail_Number)
names(temp)
# rename some of the variables
temp <- temp %>% rename(UniqueCarrier = Reporting_Airline,
FlightNum = Flight_Number_Reporting_Airline,
TailNum = Tail_Number)
temp100k <- sample_n(temp, 100000)
jan <- temp100k
temp <- select(July2019, all_of(keep_names))
names(temp)
temp <- temp %>% rename(UniqueCarrier = Reporting_Airline,
FlightNum = Flight_Number_Reporting_Airline,
TailNum = Tail_Number)
temp100k <- sample_n(temp, 100000)
jul <- temp100k
rm(temp); rm(temp100k)
#### EDA #####
head(jan, n=5)
head(jul, n=5)
# compute missing data proportion
sapply(jan, function(col)
sum(is.na(col)) / length(col)
) %>% round(digits=2)
sapply(jul, function(col)
sum(is.na(col)) / length(col)
) %>% round(digits=2)
select(jan, ArrDelay, CarrierDelay:LateAircraftDelay) %>% head(n=10)
select(jul, ArrDelay, CarrierDelay:LateAircraftDelay) %>% head(n=20)
#Flight Data - number of flights
par(mfrow=c(2,2))
barplot(table(jan$DayofMonth), main="January: Day")
barplot(table(jan$DayOfWeek), main="January: Weekday (1=Monday)")
barplot(table(jul$DayofMonth), main="July: Day")
barplot(table(jul$DayOfWeek), main="July: Weekday (1=Monday)")
#Departure Time
par(mfrow=c(1,2))
hist(jan$CRSDepTime, main = "January: Scheduled Departure Time")
hist(jul$CRSDepTime, main = "July: Scheduled Departure Time")
par(mfrow=c(2,3))
hist(jan$DepDelay, main = "January: Departure Delay, minutes")
hist(jan$ArrDelay, main = "January: Arrival Delay, minutes")
plot(jan$DepDelay, jan$ArrDelay, main = "January")
abline(0,1)
hist(jul$DepDelay, main =  "July: Departure Delay, minutes")
hist(jul$ArrDelay, main = "July: Arrival Delay, minutes")
plot(jul$DepDelay, jul$ArrDelay)
abline(0,1)
#Distance and AirTime
par(mfrow=c(1,2))
plot(jan$Distance, jan$AirTime)
jan[ which(jan$AirTime>500) , ]
plot(jul$Distance, jul$AirTime)
jul[ which(jul$AirTime>500) , ]
#Feature Engineering
#Weekday
jan$weekday <- factor(jan$DayOfWeek,
labels=c("Mon","Tue","Wed","Thu","Fri","Sat","Sun"))
jul$weekday <- factor(jul$DayOfWeek,
labels=c("Mon","Tue","Wed","Thu","Fri","Sat","Sun"))
#log-transform delay times
summary(jan$ArrDelay)
#pmax function returns the parallel maxima of two or more input vectors.
jan$ArrDelay <- pmax(0, jan$ArrDelay)
jan$DepDelay <- pmax(0, jan$DepDelay)
jul$ArrDelay <- pmax(0, jul$ArrDelay)
jul$DepDelay <- pmax(0, jul$DepDelay)
summary(jan$ArrDelay)
#Address zeros for logs
jan$logArrDelay <- log(1 + jan$ArrDelay)
jan$logDepDelay <- log(1 + jan$DepDelay)
jul$logArrDelay <- log(1 + jul$ArrDelay)
jul$logDepDelay <- log(1 + jul$DepDelay)
summary(jan$logArrDelay)
#Transform Departure Time
#
par(mfrow=c(1,1))
plot(jan$CRSDepTime, jan$ArrDelay,
main = "January: Arrival Delay vs Scheduled Departure Time")
head(jan$CRSDepTime)
#
# %% is the modulo operation
jan$DecimalDepTime <- floor(jan$CRSDepTime / 100) +
(jan$CRSDepTime %% 100)/60
head(jan$CRSDepTime)
head(jan$DecimalDepTime)
jul$DecimalDepTime <- floor(jul$CRSDepTime / 100) +
(jul$CRSDepTime %% 100)/60
head(jul$CRSDepTime)
head(jul$DecimalDepTime)
#Average Speed
par(mfrow=c(1,2))
jan$speed <- jan$Distance / (jan$AirTime/60)
boxplot(jan$speed)
jul$speed <- jul$Distance / (jul$AirTime/60)
boxplot(jul$speed)
filter(jan, speed >= 650)
#remove speeds greater than 650 mph
jan_low_speed <- filter(jan, speed <= 650)
#Flight delay by time of day
#Add a smoothed conditional mean geom_smooth
ggplot(jan, aes(x=DecimalDepTime, y=ArrDelay)) +
geom_point() + geom_smooth()
ggplot(jan, aes(x=DecimalDepTime, y=logArrDelay)) +
geom_point(alpha=0.8, shape = ".") + geom_smooth(colour = "darkgreen")
ggplot(jul, aes(x=DecimalDepTime, y=ArrDelay)) +
geom_point() + geom_smooth()
ggplot(jul, aes(x=DecimalDepTime, y=logArrDelay)) +
geom_point(alpha=0.8, shape = ".") + geom_smooth(colour = "darkgreen")
####################################################################
##Select city pairs data to explore - ORD to SFO and ORD to LGA
janSFO <- filter(jan, Origin == "ORD" & Dest == "SFO")
janLGA <- filter(jan, Origin == "ORD" & Dest == "LGA")
julSFO <- filter(jul, Origin == "ORD" & Dest == "SFO")
julLGA <- filter(jul, Origin == "ORD" & Dest == "LGA")
#Flight Data
par(mfrow=c(2,2))
barplot(table(janSFO$DayofMonth), main="January SFO: Day")
barplot(table(janSFO$DayOfWeek), main="January SFO: Weekday (1=Monday)")
barplot(table(janLGA$DayofMonth), main="July LGA: Day")
barplot(table(janLGA$DayOfWeek), main="July LGA: Weekday (1=Monday)")
par(mfrow=c(2,3))
hist(janSFO$DepDelay, main = "January SFO: Departure Delay, minutes")
hist(janSFO$ArrDelay, main = "January SFO: Arrival Delay, minutes")
plot(janSFO$DepDelay, janSFO$ArrDelay, main = "January SFO")
abline(0,1)
hist(janLGA$DepDelay, main =  "January LGA: Departure Delay, minutes")
hist(janLGA$ArrDelay, main = "January LGA: Arrival Delay, minutes")
plot(janLGA$DepDelay, janLGA$ArrDelay, main = "January LGA")
abline(0,1)
par(mfrow=c(1,1))
knitr::opts_chunk$set(echo = FALSE)
auto = read.csv("Auto.csv", na.strings = "NA")
?barplot
View(auto)
barplot(freq, main = "Frequency of vehicle production in different countries")
auto$origin = factor(auto$origin, 1:3, c("US", "Europe", "Japan"))
freq <- table(auto$origin)
barplot(freq, main = "Frequency of vehicle production in different countries")
auto$origin = factor(auto$origin, 1:3, c("US", "Europe", "Japan"))
freq <- table(auto$origin)
barplot(freq, main = "Frequency of vehicle production in different countries", xlab = "Country", ylab = "Frequency")
auto$origin = factor(auto$origin, 1:3, c("US", "Europe", "Japan"))
freq <- table(auto$origin)
barplot(freq, main = "Frequency of vehicle production in different countries", xlab = "Country", ylab = "Frequency")
auto$origin = factor(auto$origin, 1:3, c("US", "Europe", "Japan"))
freq <- table(auto$origin)
barplot(freq, main = "Frequency of vehicle production in different countries", ylab = "Frequency")
auto$origin = factor(auto$origin, 1:3, c("US", "Europe", "Japan"))
freq <- table(auto$origin)
barplot(freq, main = "Frequency of vehicle production in different countries")
auto$origin = factor(auto$origin, 1:3, c("US", "Europe", "Japan"))
freq <- table(auto$origin)
barplot(freq, main = "Frequency of vehicle production in different countries")
auto$origin = factor(auto$origin, 1:3, c("US", "Europe", "Japan"))
auto = read.csv("Auto.csv", na.strings = "NA")
auto$origin = factor(auto$origin, 1:3, c("US", "Europe", "Japan"))
freq <- table(auto$origin)
barplot(freq, main = "Frequency of vehicle production in different countries")
auto$origin = factor(auto$origin, 1:3, c("US", "Europe", "Japan"))
freq <- table(auto$origin)
barplot(freq, main = "Frequency of vehicle production in different countries", xlab = "Country", ylab = "Frequency")
auto$origin = factor(auto$origin, 1:3, c("US", "Europe", "Japan"))
freq <- table(auto$origin)
barplot(freq, main = "Frequency of vehicle production in different countries")
auto = read.csv("Auto.csv", na.strings = "NA")
auto$origin = factor(auto$origin, 1:3, c("US", "Europe", "Japan"))
freq <- table(auto$origin)
barplot(freq, main = "Frequency of vehicle production in different countries", xlab = "Country", ylab = "Frequency")
