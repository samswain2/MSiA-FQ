validation = df[folds[[i]],]
# Train temp SVM
svm_temp <- svm(factor(admit) ~ gre + gpa + rank,
data = training)
# Test temp SVM
pred_temp <- predict(svm_temp,
validation,
decision.values = F,
probability = F)
# Get temp accuracy and AUC
acc_temp <- mean(pred_temp==validation$admit)
roc_obj <- roc(as.numeric(validation$admit),
as.numeric(pred_temp),
levels = c(0, 1),
direction = "<")
auc_temp <- auc(roc_obj)[1]
cat("Acc: ", acc_temp, "\n")
cat("AUC: ", auc_temp)
}
kernels = c('linear', 'polynomial', 'radial', 'sigmoid')
svm <- 0
nfolds = 5
folds = createFolds(1:nrow(train), k=nfolds)
for (i in 1:nfolds){
# Get data for folds
training = train[-folds[[i]],]
validation = df[folds[[i]],]
# Train temp SVM
svm_temp <- svm(factor(admit) ~ gre + gpa + rank,
data = training)
# Test temp SVM
pred_temp <- predict(svm_temp,
validation,
decision.values = F,
probability = F)
# Get temp accuracy and AUC
acc_temp <- mean(pred_temp==validation$admit)
roc_obj <- roc(as.numeric(validation$admit),
as.numeric(pred_temp),
levels = c(0, 1),
direction = "<")
auc_temp <- auc(roc_obj)[1]
cat("Acc: ", acc_temp, "\n")
cat("AUC: ", auc_temp, "\n")
print("------------------")
}
print(temp_auc_list)
kernels = c('linear', 'polynomial', 'radial', 'sigmoid')
svm <- 0
nfolds = 5
folds = createFolds(1:nrow(train),
k = nfolds)
temp_acc_list = c()
temp_auc_list = c()
for (i in 1:nfolds){
# Get data for folds
training = train[-folds[[i]],]
validation = df[folds[[i]],]
# Train temp SVM
svm_temp <- svm(factor(admit) ~ gre + gpa + rank,
data = training)
# Test temp SVM
pred_temp <- predict(svm_temp,
validation,
decision.values = F,
probability = F)
# Get temp accuracy and AUC
acc_temp <- mean(pred_temp==validation$admit)
roc_obj <- roc(as.numeric(validation$admit),
as.numeric(pred_temp),
levels = c(0, 1),
direction = "<")
auc_temp <- auc(roc_obj)[1]
# Print temp values
cat("Acc: ", acc_temp, "\n")
cat("AUC: ", auc_temp, "\n")
print("------------------")
temp_acc_list = append(x = temp_acc_list, values = acc_temp)
temp_auc_list = append(x = temp_auc_list, values = auc_temp)
}
print(temp_acc_list)
print(temp_auc_list)
kernels = c('linear', 'polynomial', 'radial', 'sigmoid')
svm <- 0
nfolds = 5
folds = createFolds(1:nrow(train),
k = nfolds)
temp_acc_list = c()
temp_auc_list = c()
for (i in 1:nfolds){
# Get data for folds
training = train[-folds[[i]],]
validation = df[folds[[i]],]
# Train temp SVM
svm_temp <- svm(factor(admit) ~ gre + gpa + rank,
data = training)
# Test temp SVM
pred_temp <- predict(svm_temp,
validation,
decision.values = F,
probability = F)
# Get temp accuracy and AUC
acc_temp <- mean(pred_temp==validation$admit)
roc_obj <- roc(as.numeric(validation$admit),
as.numeric(pred_temp),
levels = c(0, 1),
direction = "<")
auc_temp <- auc(roc_obj)[1]
# Print temp values
cat("Acc: ", acc_temp, "\n")
cat("AUC: ", auc_temp, "\n")
print("------------------")
temp_acc_list = append(x = temp_acc_list, values = acc_temp)
temp_auc_list = append(x = temp_auc_list, values = auc_temp)
}
print(temp_acc_list)
print(temp_auc_list)
set.seed(400)
kernels = c('linear', 'polynomial', 'radial', 'sigmoid')
svm <- 0
nfolds = 5
folds = createFolds(1:nrow(train),
k = nfolds)
temp_acc_list = c()
temp_auc_list = c()
for (i in 1:nfolds){
# Get data for folds
training = train[-folds[[i]],]
validation = df[folds[[i]],]
# Train temp SVM
svm_temp <- svm(factor(admit) ~ gre + gpa + rank,
data = training)
# Test temp SVM
pred_temp <- predict(svm_temp,
validation,
decision.values = F,
probability = F)
# Get temp accuracy and AUC
acc_temp <- mean(pred_temp==validation$admit)
roc_obj <- roc(as.numeric(validation$admit),
as.numeric(pred_temp),
levels = c(0, 1),
direction = "<")
auc_temp <- auc(roc_obj)[1]
# Print temp values
cat("Acc: ", acc_temp, "\n")
cat("AUC: ", auc_temp, "\n")
print("------------------")
temp_acc_list = append(x = temp_acc_list, values = acc_temp)
temp_auc_list = append(x = temp_auc_list, values = auc_temp)
}
print(temp_acc_list)
print(temp_auc_list)
set.seed(400)
kernels = c('linear', 'polynomial', 'radial', 'sigmoid')
svm <- 0
nfolds = 5
folds = createFolds(1:nrow(train),
k = nfolds)
temp_acc_list = c()
temp_auc_list = c()
for (i in 1:nfolds){
# Get data for folds
training = train[-folds[[i]],]
validation = df[folds[[i]],]
# Train temp SVM
svm_temp <- svm(factor(admit) ~ gre + gpa + rank,
data = training)
# Test temp SVM
pred_temp <- predict(svm_temp,
validation,
decision.values = F,
probability = F)
# Get temp accuracy and AUC
acc_temp <- mean(pred_temp==validation$admit)
roc_obj <- roc(as.numeric(validation$admit),
as.numeric(pred_temp),
levels = c(0, 1),
direction = "<")
auc_temp <- auc(roc_obj)[1]
# Print temp values
cat("Acc: ", acc_temp, "\n")
cat("AUC: ", auc_temp, "\n")
print("------------------")
temp_acc_list = append(x = temp_acc_list, values = acc_temp)
temp_auc_list = append(x = temp_auc_list, values = auc_temp)
}
print(mean(temp_acc_list))
print(mean(temp_auc_list))
kernels = c('linear', 'polynomial', 'radial', 'sigmoid')
nfolds = 5
temp_auc_list = c()
CrossValidation <- function(nfolds) {
# Get folds
folds = createFolds(1:nrow(train),
k = nfolds)
temp_acc_list = c()
temp_auc_list = c()
for (i in 1:nfolds){
# Get data for folds
training = train[-folds[[i]],]
validation = df[folds[[i]],]
# Train temp SVM
svm_temp <- svm(factor(admit) ~ gre + gpa + rank,
data = training)
# Test temp SVM
pred_temp <- predict(svm_temp,
validation,
decision.values = F,
probability = F)
# Get temp accuracy and AUC
acc_temp <- mean(pred_temp==validation$admit)
roc_obj <- roc(as.numeric(validation$admit),
as.numeric(pred_temp),
levels = c(0, 1),
direction = "<")
auc_temp <- auc(roc_obj)[1]
# Print temp values
cat("Acc: ", acc_temp, "\n")
cat("AUC: ", auc_temp, "\n")
print("------------------")
temp_acc_list = append(x = temp_acc_list, values = acc_temp)
temp_auc_list = append(x = temp_auc_list, values = auc_temp)
}
return(mean(temp_auc_list))
}
print(CrossValidation(5))
kernels = c('linear', 'polynomial', 'radial', 'sigmoid')
nfolds = 5
GridSearch_Custom <- function(nfolds = 5,
kernel = "radial",
cost = 1,
degree = 3,
gamma = 1/3,
coef0 = 0) {
# Get folds
folds = createFolds(1:nrow(train),
k = nfolds)
temp_acc_list = c()
temp_auc_list = c()
for (i in 1:nfolds){
# Get data for folds
training = train[-folds[[i]],]
validation = df[folds[[i]],]
# Train temp SVM
svm_temp <- svm(factor(admit) ~ gre + gpa + rank,
data = training,
scale = T,
probability = T,
# default linear
kernel = kernel,
# cost of constraints violation (default: 1)
cost = cost,
# needed for: polynomial (default: 3)
degree = degree,
# needed for all except linear (default: 1/(data dimension))
gamma = gamma,
# needed for: polynomial, sigmoid (default: 0)
coef0 = coef0
)
# Test temp SVM
pred_temp <- predict(svm_temp,
validation,
decision.values = F,
probability = F)
# Get temp accuracy and AUC
acc_temp <- mean(pred_temp==validation$admit)
roc_obj <- roc(as.numeric(validation$admit),
as.numeric(pred_temp),
levels = c(0, 1),
direction = "<")
auc_temp <- auc(roc_obj)[1]
# Print temp values
cat("Acc: ", acc_temp, "\n")
cat("AUC: ", auc_temp, "\n")
print("------------------")
temp_acc_list = append(x = temp_acc_list, values = acc_temp)
temp_auc_list = append(x = temp_auc_list, values = auc_temp)
}
return(mean(temp_auc_list))
}
print(GridSearch_Custom(5))
GridSearch_Custom <- function(nfolds = 5,
kernel = "radial",
cost = 1,
degree = 3,
gamma = 1/3,
coef0 = 0) {
# Get folds
folds = createFolds(1:nrow(train),
k = nfolds)
temp_acc_list = c()
temp_auc_list = c()
for (i in 1:nfolds){
# Get data for folds
training = train[-folds[[i]],]
validation = df[folds[[i]],]
# Train temp SVM
svm_temp <- svm(factor(admit) ~ gre + gpa + rank,
data = training,
scale = T,
probability = T,
# default linear
kernel = kernel,
# cost of constraints violation (default: 1)
cost = cost,
# needed for: polynomial (default: 3)
degree = degree,
# needed for all except linear (default: 1/(data dimension))
gamma = gamma,
# needed for: polynomial, sigmoid (default: 0)
coef0 = coef0
)
# Test temp SVM
pred_temp <- predict(svm_temp,
validation,
decision.values = F,
probability = F)
# Get temp accuracy and AUC
acc_temp <- mean(pred_temp==validation$admit)
roc_obj <- roc(as.numeric(validation$admit),
as.numeric(pred_temp),
levels = c(0, 1),
direction = "<")
auc_temp <- auc(roc_obj)[1]
# Print temp values
cat("Acc: ", acc_temp, "\n")
cat("AUC: ", auc_temp, "\n")
print("------------------")
temp_acc_list = append(x = temp_acc_list, values = acc_temp)
temp_auc_list = append(x = temp_auc_list, values = auc_temp)
}
return(mean(temp_auc_list))
}
0.001 * 10^(seq(0,6,2))
0.001 * 10^(seq(0,6,1))
cost <- c(0.001 * 10^(seq(0,6,1)))
cost
degree <- c(seq(1, 4, 1))
# Set parameters
kernels = c('linear', 'polynomial', 'radial', 'sigmoid')
nfolds = 5
cost <- c(0.001 * 10^(seq(0,6,1)))
degree <- c(seq(1, 4, 1))
gamma <- c(0.001 * 10^(seq(0,6,1)))
coef0 <- c(0.001 * 10^(seq(0,6,1)))
# Set parameters
kernels = c('linear', 'polynomial', 'radial', 'sigmoid')
nfolds = 5
cost <- c(0.001 * 10^(seq(0,6,1)))
degree <- c(seq(1, 4, 1))
gamma <- c(0.001 * 10^(seq(0,6,1)))
coef0 <- c(0.001 * 10^(seq(0,6,1)))
for (k in kernels) {
for (c in cost) {
if (k == 'linear') {
GridSearch_Custom(nfolds = nfolds,
kernel = k,
cost = c)
}
}
}
cost <- c(0.001 * 10^(seq(0,4,1)))
cost
# Set parameters
kernels = c('linear', 'polynomial', 'radial', 'sigmoid')
nfolds = 5
cost <- c(0.001 * 10^(seq(0,4,1)))
degree <- c(seq(1, 4, 1))
gamma <- c(0.001 * 10^(seq(0,6,1)))
coef0 <- c(0.001 * 10^(seq(0,6,1)))
for (k in kernels) {
for (c in cost) {
if (k == 'linear') {
GridSearch_Custom(nfolds = nfolds,
kernel = k,
cost = c)
}
}
}
set.seed(400)
n = nrow(df)
# Get 20% for test set
sample = sample.int(n = n, size = floor(.2*n), replace = F)
train_wrong_index = df[-sample,]
test = df[sample,]
train = train_wrong_index
rownames(train) = 1:nrow(train_wrong_index)
set.seed(400)
n = nrow(df)
# Get 20% for test set
sample = sample.int(n = n, size = floor(.2*n), replace = F)
df <- read.csv(file = 'gradAdmit.csv', header = T)
set.seed(400)
n = nrow(df)
# Get 20% for test set
sample = sample.int(n = n, size = floor(.2*n), replace = F)
train_wrong_index = df[-sample,]
test = df[sample,]
train = train_wrong_index
rownames(train) = 1:nrow(train_wrong_index)
# Libraries
library(e1071)
library(pROC)
library(caret)
# Train
svm <- svm(factor(admit)~gre+gpa+rank,
data = train,
scale = T,
probability = T,
kernel = 'radial', # default linear
cost = 1, # cost of constraints violation (default: 1)
degree = 6, # needed for: polynomial (default: 3)
gamma = 1, # needed for all except linear (default: 1/(data dimension))
coef0 = 0 # needed for: polynomial, sigmoid (default: 0)
)
GridSearch_Custom <- function(nfolds = 5,
kernel = "radial",
cost = 1,
degree = 3,
gamma = 1/3,
coef0 = 0) {
# Get folds
folds = createFolds(1:nrow(train),
k = nfolds)
temp_acc_list = c()
temp_auc_list = c()
for (i in 1:nfolds){
# Get data for folds
training = train[-folds[[i]],]
validation = df[folds[[i]],]
# Train temp SVM
svm_temp <- svm(factor(admit) ~ gre + gpa + rank,
data = training,
scale = T,
probability = T,
# default linear
kernel = kernel,
# cost of constraints violation (default: 1)
cost = cost,
# needed for: polynomial (default: 3)
degree = degree,
# needed for all except linear (default: 1/(data dimension))
gamma = gamma,
# needed for: polynomial, sigmoid (default: 0)
coef0 = coef0
)
# Test temp SVM
pred_temp <- predict(svm_temp,
validation,
decision.values = F,
probability = F)
# Get temp accuracy and AUC
acc_temp <- mean(pred_temp==validation$admit)
roc_obj <- roc(as.numeric(validation$admit),
as.numeric(pred_temp),
levels = c(0, 1),
direction = "<")
auc_temp <- auc(roc_obj)[1]
# Print temp values
cat("Acc: ", acc_temp, "\n")
cat("AUC: ", auc_temp, "\n")
print("------------------")
temp_acc_list = append(x = temp_acc_list, values = acc_temp)
temp_auc_list = append(x = temp_auc_list, values = auc_temp)
}
return(mean(temp_auc_list))
}
# Set parameters
kernels = c('linear', 'polynomial', 'radial', 'sigmoid')
nfolds = 5
cost <- c(0.001 * 10^(seq(0,4,1)))
degree <- c(seq(1, 4, 1))
gamma <- c(0.001 * 10^(seq(0,6,1)))
coef0 <- c(0.001 * 10^(seq(0,6,1)))
for (k in kernels) {
for (c in cost) {
if (k == 'linear') {
GridSearch_Custom(nfolds = nfolds,
kernel = k,
cost = c)
} else {
for (g in gamma) {
if (k == 'radial') {
GridSearch_Custom(nfolds = nfolds,
kernel = k,
cost = c,
gamma = g)
} else {
for (c0 in coef0) {
if (k == 'sigmoid') {
GridSearch_Custom(nfolds = nfolds,
kernel = k,
cost = c,
gamma = g,
coef0 = c0)
} else {
for (d in degree) {
GridSearch_Custom(nfolds = nfolds,
kernel = k,
cost = c,
gamma = g,
coef0 = c0,
degree = d)
}
}
}
}
}
}
}
}
